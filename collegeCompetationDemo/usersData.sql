-- Create the database if it doesn't exist
CREATE DATABASE IF NOT EXISTS collegeCdb;

-- Use the newly created or existing database
USE collegeCdb;

-- Drop tables in the correct order to avoid foreign key constraint issues
-- Drop 'competitions' first as it has a foreign key reference to 'users'
DROP TABLE IF EXISTS competitions;
DROP TABLE IF EXISTS users;

-- Create the users table
CREATE TABLE users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, -- In a real application, store hashed passwords here (e.g., BCrypt hash)
    email VARCHAR(255) NOT NULL UNIQUE,
    college_name VARCHAR(255) NOT NULL, -- This field was NOT NULL but missing in your INSERT
    role ENUM('USER','ADMIN') NOT NULL
);

-- Create the competitions table
CREATE TABLE competitions (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    competition_name VARCHAR(255) NOT NULL,
    date VARCHAR(255) NOT NULL, -- Initially VARCHAR to allow for flexible insertion if needed
    college_name VARCHAR(255) NOT NULL,
    user_id BIGINT,
    -- Define foreign key relationship with CASCADE delete
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Alter the 'date' column in 'competitions' table to DATE type
-- This should be done after table creation but before inserting date data if you want strict DATE format
ALTER TABLE competitions
MODIFY COLUMN date DATE;

-- Insert sample admin user data into the users table
-- IMPORTANT: Added 'college_name' as it's a NOT NULL field in the 'users' table.
-- WARNING: You MUST replace 'YOUR_GENERATED_BCRYPT_HASH_FOR_SANIKA_1899_HERE' with an actual
-- BCrypt hash generated by your Spring Boot application's BCryptPasswordEncoder.
-- Example of how to generate a hash:
-- In a simple Java main method:
-- import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-- public class PasswordHasher { public static void main(String[] args) { System.out.println(new BCryptPasswordEncoder().encode("Sanika@1899")); } }
INSERT INTO users (username, password, email, college_name, role)
VALUES ('sanika kadam', '$2a$10$YOUR_GENERATED_BCRYPT_HASH_FOR_SANIKA_1899_HERE', 'sanika@college.com', 'KBP Satara', 'ADMIN');

-- Insert sample student user data
INSERT INTO users (username, password, email, college_name, role)
VALUES ('student1', '$2a$10$YOUR_GENERATED_BCRYPT_HASH_FOR_STUDENT123_HERE', 'student1@gmail.com', 'ABC College', 'USER');

-- Insert sample competition data (assuming 'sanika kadam' user has id 1 and 'student1' has id 2)
-- You might need to adjust user_id based on actual auto-generated IDs
INSERT INTO competitions (competition_name, date, college_name, user_id)
VALUES ('Annual Tech Fest', '2025-09-01', 'KBP Satara', 1);

INSERT INTO competitions (competition_name, date, college_name, user_id)
VALUES ('Inter-College Hackathon', '2025-08-15', 'ABC College', 2);

-- Display all data from the users table
SELECT * FROM users;

-- Display all data from the competitions table
SELECT * FROM competitions;

-- Describe the competitions table to verify schema changes (like 'date' column type)
DESCRIBE competitions;